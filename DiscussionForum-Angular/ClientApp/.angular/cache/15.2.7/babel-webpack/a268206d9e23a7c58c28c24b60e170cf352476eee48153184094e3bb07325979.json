{"ast":null,"code":"import { Validators } from \"@angular/forms\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"./authentication.service\";\nimport * as i3 from \"@angular/router\";\nimport * as i4 from \"@angular/common\";\nfunction LoginComponent_div_11_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 8);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(ctx_r0.loginError);\n  }\n}\nexport class LoginComponent {\n  constructor(_formbuilder, _authService, _router) {\n    this._formbuilder = _formbuilder;\n    this._authService = _authService;\n    this._router = _router;\n    this.loginError = \"\";\n    this.loginForm = _formbuilder.group({\n      username: [\"\", Validators.required],\n      password: [\"\", Validators.required]\n    });\n  }\n  get loggedIn() {\n    return this._authService.isLoggedIn;\n  }\n  loginUser() {\n    const user = this.loginForm.value;\n    this._authService.login(user).subscribe(response => {\n      if (response.success) {\n        this._authService.setLoggedIn(true);\n        this._authService.setLoggedInUser(response.username);\n        console.log(\"User logged in:\", response.username);\n        this._router.navigate([\"/questions\"]);\n        // Clear any previous login error message\n        this.loginError = '';\n      } else {\n        this.loginError = \"Login failed\";\n      }\n      // Handle any other logic if needed for success case\n    }, error => {\n      // Handle server or network errors\n      console.error(\"Error occurred:\", error);\n      this.loginError = \"Login failed\";\n    });\n  }\n}\nLoginComponent.ɵfac = function LoginComponent_Factory(t) {\n  return new (t || LoginComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.AuthService), i0.ɵɵdirectiveInject(i3.Router));\n};\nLoginComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: LoginComponent,\n  selectors: [[\"app-login-component\"]],\n  decls: 12,\n  vars: 3,\n  consts: [[3, \"formGroup\", \"ngSubmit\"], [1, \"mb-3\"], [\"for\", \"username\", 1, \"form-label\"], [\"type\", \"text\", \"id\", \"username\", \"placeholder\", \"Enter your username\", \"formControlName\", \"username\", 1, \"form-control\"], [\"for\", \"password\", 1, \"form-label\"], [\"type\", \"password\", \"id\", \"password\", \"placeholder\", \"Enter your password\", \"formControlName\", \"password\", 1, \"form-control\"], [\"type\", \"submit\", 1, \"btn\", \"btn-primary\", 3, \"disabled\"], [\"class\", \"error-message\", 4, \"ngIf\"], [1, \"error-message\"]],\n  template: function LoginComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"form\", 0);\n      i0.ɵɵlistener(\"ngSubmit\", function LoginComponent_Template_form_ngSubmit_0_listener() {\n        return ctx.loginUser();\n      });\n      i0.ɵɵelementStart(1, \"div\", 1)(2, \"label\", 2);\n      i0.ɵɵtext(3, \"Username\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(4, \"input\", 3);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(5, \"div\", 1)(6, \"label\", 4);\n      i0.ɵɵtext(7, \"Password\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(8, \"input\", 5);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(9, \"button\", 6);\n      i0.ɵɵtext(10, \"Log in\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(11, LoginComponent_div_11_Template, 2, 1, \"div\", 7);\n      i0.ɵɵelementEnd();\n    }\n    if (rf & 2) {\n      i0.ɵɵproperty(\"formGroup\", ctx.loginForm);\n      i0.ɵɵadvance(9);\n      i0.ɵɵproperty(\"disabled\", ctx.loginForm.invalid);\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"ngIf\", ctx.loginError !== \"\");\n    }\n  },\n  dependencies: [i4.NgIf, i1.ɵNgNoValidate, i1.DefaultValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.FormGroupDirective, i1.FormControlName],\n  encapsulation: 2\n});","map":{"version":3,"mappings":"AAGA,SAAiCA,UAAU,QAA0C,gBAAgB;;;;;;;;ICOjGC,8BAAqD;IAAAA,YAAgB;IAAAA,iBAAM;;;;IAAtBA,eAAgB;IAAhBA,uCAAgB;;;ADAzE,OAAM,MAAOC,cAAc;EAIzBC,YAAoBC,YAAyB,EAAUC,YAAyB,EAAUC,OAAe;IAArF,iBAAY,GAAZF,YAAY;IAAuB,iBAAY,GAAZC,YAAY;IAAuB,YAAO,GAAPC,OAAO;IAFjG,eAAU,GAAU,EAAE;IAGpB,IAAI,CAACC,SAAS,GAAGH,YAAY,CAACI,KAAK,CAAC;MAClCC,QAAQ,EAAE,CAAC,EAAE,EAAET,UAAU,CAACU,QAAQ,CAAC;MACnCC,QAAQ,EAAE,CAAC,EAAE,EAAEX,UAAU,CAACU,QAAQ;KACnC,CAAC;EACJ;EAEA,IAAIE,QAAQ;IACV,OAAO,IAAI,CAACP,YAAY,CAACQ,UAAU;EACrC;EAEAC,SAAS;IACP,MAAMC,IAAI,GAAG,IAAI,CAACR,SAAS,CAACS,KAAK;IAEjC,IAAI,CAACX,YAAY,CAACY,KAAK,CAACF,IAAI,CAAC,CAC1BG,SAAS,CAACC,QAAQ,IAAG;MACpB,IAAIA,QAAQ,CAACC,OAAO,EAAE;QACpB,IAAI,CAACf,YAAY,CAACgB,WAAW,CAAC,IAAI,CAAC;QACnC,IAAI,CAAChB,YAAY,CAACiB,eAAe,CAACH,QAAQ,CAACV,QAAQ,CAAC;QACpDc,OAAO,CAACC,GAAG,CAAC,iBAAiB,EAAEL,QAAQ,CAACV,QAAQ,CAAC;QACjD,IAAI,CAACH,OAAO,CAACmB,QAAQ,CAAC,CAAC,YAAY,CAAC,CAAC;QACrC;QACA,IAAI,CAACC,UAAU,GAAG,EAAE;OACrB,MACI;QACH,IAAI,CAACA,UAAU,GAAG,cAAc;;MAElC;IACF,CAAC,EAAEC,KAAK,IAAG;MACT;MACAJ,OAAO,CAACI,KAAK,CAAC,iBAAiB,EAAEA,KAAK,CAAC;MACvC,IAAI,CAACD,UAAU,GAAG,cAAc;IAClC,CAAC,CAAC;EACN;;AArCWxB,cAAc;mBAAdA,cAAc;AAAA;AAAdA,cAAc;QAAdA,cAAc;EAAA0B;EAAAC;EAAAC;EAAAC;EAAAC;IAAA;MCV3B/B,+BAAuD;MAAzBA;QAAA,OAAYgC,eAAW;MAAA,EAAC;MAClDhC,8BAAkB;MAC2BA,wBAAQ;MAAAA,iBAAQ;MACzDA,2BAAmH;MACvHA,iBAAM;MACNA,8BAAkB;MAC2BA,wBAAQ;MAAAA,iBAAQ;MACzDA,2BAAuH;MAC3HA,iBAAM;MACNA,iCAA6E;MAAAA,uBAAM;MAAAA,iBAAS;MAC5FA,iEAA2E;MAC/EA,iBAAO;;;MAXDA,yCAAuB;MASHA,eAA8B;MAA9BA,gDAA8B;MAC9CA,eAAuB;MAAvBA,4CAAuB","names":["Validators","i0","LoginComponent","constructor","_formbuilder","_authService","_router","loginForm","group","username","required","password","loggedIn","isLoggedIn","loginUser","user","value","login","subscribe","response","success","setLoggedIn","setLoggedInUser","console","log","navigate","loginError","error","selectors","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["/Users/bhira/Desktop/Skole/5.semester/DiscussionForum-Angular/DiscussionForum-Angular/ClientApp/src/app/authentication/login.component.ts","/Users/bhira/Desktop/Skole/5.semester/DiscussionForum-Angular/DiscussionForum-Angular/ClientApp/src/app/authentication/login.component.html"],"sourcesContent":["import { Component, OnInit } from \"@angular/core\"\nimport { AuthService } from \"./authentication.service\"\nimport { Router } from \"@angular/router\"\nimport { FormGroup, FormControl, Validators, FormBuilder, ReactiveFormsModule } from \"@angular/forms\"\n\n@Component({\n  selector: \"app-login-component\",\n  templateUrl: \"./login.component.html\",\n})\n\nexport class LoginComponent {\n  loginForm: FormGroup;\n  loginError:string = \"\"\n\n  constructor(private _formbuilder: FormBuilder, private _authService: AuthService, private _router: Router) {\n    this.loginForm = _formbuilder.group({\n      username: [\"\", Validators.required],\n      password: [\"\", Validators.required]\n    });\n  }\n\n  get loggedIn() {\n    return this._authService.isLoggedIn;\n  }\n\n  loginUser() {\n    const user = this.loginForm.value\n\n    this._authService.login(user)\n      .subscribe(response => {\n        if (response.success) {\n          this._authService.setLoggedIn(true);\n          this._authService.setLoggedInUser(response.username);\n          console.log(\"User logged in:\", response.username);\n          this._router.navigate([\"/questions\"])\n          // Clear any previous login error message\n          this.loginError = '';\n        }\n        else {\n          this.loginError = \"Login failed\"\n        }\n        // Handle any other logic if needed for success case\n      }, error => {\n        // Handle server or network errors\n        console.error(\"Error occurred:\", error);\n        this.loginError = \"Login failed\";\n      });\n  }\n}\n","<form [formGroup]=\"loginForm\" (ngSubmit)=\"loginUser()\">\n    <div class=\"mb-3\">\n        <label for=\"username\" class=\"form-label\">Username</label>\n        <input type=\"text\" id=\"username\" class=\"form-control\" placeholder=\"Enter your username\" formControlName=\"username\">\n    </div>\n    <div class=\"mb-3\">\n        <label for=\"password\" class=\"form-label\">Password</label>\n        <input type=\"password\" id=\"password\" class=\"form-control\" placeholder=\"Enter your password\" formControlName=\"password\">\n    </div>\n    <button type=\"submit\" [disabled]=\"loginForm.invalid\" class=\"btn btn-primary\">Log in</button>\n    <div *ngIf=\"loginError !== ''\" class=\"error-message\">{{ loginError }}</div>\n</form>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}