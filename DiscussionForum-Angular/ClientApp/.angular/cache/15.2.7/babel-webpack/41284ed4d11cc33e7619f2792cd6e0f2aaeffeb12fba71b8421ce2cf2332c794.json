{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from \"@angular/core\";\nimport { Validators } from \"@angular/forms\";\nlet QuestiondetailComponent = class QuestiondetailComponent {\n  constructor(_auth, _formbuilder, _router, _route, _questionService, _replyService) {\n    this._auth = _auth;\n    this._formbuilder = _formbuilder;\n    this._router = _router;\n    this._route = _route;\n    this._questionService = _questionService;\n    this._replyService = _replyService;\n    this.loggedInUser = this._auth.loggedInUserId;\n    // Initializing the reply form with form controls and validation\n    this.replyForm = _formbuilder.group({\n      content: [\"\", Validators.required]\n    });\n  }\n  // Method to fetch a question by its ID\n  getQuestionById(id) {\n    this._questionService.getQuestion(id).subscribe(data => {\n      console.log(\"Question\", data);\n      this.question = data;\n    });\n  }\n  // Method invoked on form submission to create a new reply\n  onSubmit() {\n    if (this._auth.isLoggedIn && this.question) {\n      const newReply = {\n        ...this.replyForm.value,\n        questionId: this.question.questionId\n      };\n      this._replyService.createReply(newReply).subscribe(response => {\n        if (response.success) {\n          console.log(response.message);\n          this._router.navigate([\"/questions\"]);\n        } else {\n          console.log(\"Reply creation failed\");\n        }\n      });\n    } else {\n      // If the user is not logged in, display an alert and navigate to the login page\n      alert(\"Log in to submit a reply\");\n      this._router.navigate(['auth/login']);\n    }\n  }\n  ngOnInit() {\n    //Used to retreve the question id from the route parameters\n    const id = Number(this._route.snapshot.paramMap.get('id'));\n    // Fetching the question details based on the retrieved ID\n    this.getQuestionById(id);\n  }\n};\nQuestiondetailComponent = __decorate([Component({\n  selector: \"app-questiondetail-component\",\n  templateUrl: \"./questiondetail.component.html\"\n})], QuestiondetailComponent);\nexport { QuestiondetailComponent };","map":{"version":3,"mappings":";AAAA,SAASA,SAAS,QAAgB,eAAe;AACjD,SAAiCC,UAAU,QAA0C,gBAAgB;AAc9F,IAAMC,uBAAuB,GAA7B,MAAMA,uBAAuB;EAElCC,YAAoBC,KAAkB,EAAUC,YAAyB,EAAUC,OAAe,EACxFC,MAAsB,EAAUC,gBAAiC,EAAUC,aAA2B;IAD5F,UAAK,GAALL,KAAK;IAAuB,iBAAY,GAAZC,YAAY;IAAuB,YAAO,GAAPC,OAAO;IAChF,WAAM,GAANC,MAAM;IAA0B,qBAAgB,GAAhBC,gBAAgB;IAA2B,kBAAa,GAAbC,aAAa;IAUlG,iBAAY,GAAW,IAAI,CAACL,KAAK,CAACM,cAAc;IAR9C;IACA,IAAI,CAACC,SAAS,GAAGN,YAAY,CAACO,KAAK,CAAC;MAClCC,OAAO,EAAE,CAAC,EAAE,EAAEZ,UAAU,CAACa,QAAQ;KAClC,CAAC;EACJ;EAMA;EACAC,eAAe,CAACC,EAAU;IACxB,IAAI,CAACR,gBAAgB,CAACS,WAAW,CAACD,EAAE,CAAC,CAClCE,SAAS,CAACC,IAAI,IAAG;MAChBC,OAAO,CAACC,GAAG,CAAC,UAAU,EAAEF,IAAI,CAAC;MAC7B,IAAI,CAACG,QAAQ,GAAGH,IAAI;IACtB,CAAC,CAAC;EACN;EAEA;EACAI,QAAQ;IACN,IAAI,IAAI,CAACnB,KAAK,CAACoB,UAAU,IAAI,IAAI,CAACF,QAAQ,EAAE;MAC1C,MAAMG,QAAQ,GAAG;QACf,GAAG,IAAI,CAACd,SAAS,CAACe,KAAK;QACvBC,UAAU,EAAE,IAAI,CAACL,QAAQ,CAACK;OAC3B;MAED,IAAI,CAAClB,aAAa,CAACmB,WAAW,CAACH,QAAQ,CAAC,CACrCP,SAAS,CAACW,QAAQ,IAAG;QACpB,IAAIA,QAAQ,CAACC,OAAO,EAAE;UACpBV,OAAO,CAACC,GAAG,CAACQ,QAAQ,CAACE,OAAO,CAAC;UAC7B,IAAI,CAACzB,OAAO,CAAC0B,QAAQ,CAAC,CAAC,YAAY,CAAC,CAAC;SACtC,MACI;UACHZ,OAAO,CAACC,GAAG,CAAC,uBAAuB,CAAC;;MAExC,CAAC,CAAC;KACL,MACI;MACH;MACAY,KAAK,CAAC,0BAA0B,CAAC;MACjC,IAAI,CAAC3B,OAAO,CAAC0B,QAAQ,CAAC,CAAC,YAAY,CAAC,CAAC;;EAEzC;EAEAE,QAAQ;IAEN;IACA,MAAMlB,EAAE,GAAGmB,MAAM,CAAC,IAAI,CAAC5B,MAAM,CAAC6B,QAAQ,CAACC,QAAQ,CAACC,GAAG,CAAC,IAAI,CAAC,CAAC;IAE1D;IACA,IAAI,CAACvB,eAAe,CAACC,EAAE,CAAC;EAC1B;CAED;AA3DYd,uBAAuB,eALnCF,SAAS,CAAC;EACTuC,QAAQ,EAAE,8BAA8B;EACxCC,WAAW,EAAE;CACd,CAAC,GAEWtC,uBAAuB,CA2DnC;SA3DYA,uBAAuB","names":["Component","Validators","QuestiondetailComponent","constructor","_auth","_formbuilder","_router","_route","_questionService","_replyService","loggedInUserId","replyForm","group","content","required","getQuestionById","id","getQuestion","subscribe","data","console","log","question","onSubmit","isLoggedIn","newReply","value","questionId","createReply","response","success","message","navigate","alert","ngOnInit","Number","snapshot","paramMap","get","selector","templateUrl"],"sourceRoot":"","sources":["/Users/bhira/Desktop/Skole/5.semester/ITPE3200/DiscussionForum-Angular/DiscussionForum-Angular/ClientApp/src/app/questions/questiondetail.component.ts"],"sourcesContent":["import { Component, OnInit } from \"@angular/core\"\nimport { FormGroup, FormControl, Validators, FormBuilder, ReactiveFormsModule } from \"@angular/forms\"\nimport { ActivatedRoute } from \"@angular/router\"\nimport { HttpClient } from \"@angular/common/http\"\nimport { QuestionService } from \"./questions.service\"\nimport { ReplyService } from \"../replies/replies.service\"\nimport { IQuestion } from \"./question\"\nimport { Router } from \"@angular/router\"\nimport { AuthService } from \"../authentication/authentication.service\"\n\n@Component({\n  selector: \"app-questiondetail-component\",\n  templateUrl: \"./questiondetail.component.html\",\n})\n\nexport class QuestiondetailComponent implements OnInit {\n \n  constructor(private _auth: AuthService, private _formbuilder: FormBuilder, private _router: Router,\n    private _route: ActivatedRoute, private _questionService: QuestionService, private _replyService: ReplyService) {\n\n    // Initializing the reply form with form controls and validation\n    this.replyForm = _formbuilder.group({\n      content: [\"\", Validators.required],\n    });\n  }\n\n  replyForm: FormGroup;\n  question: IQuestion | undefined\n  loggedInUser: string = this._auth.loggedInUserId\n\n  // Method to fetch a question by its ID\n  getQuestionById(id: number): void {\n    this._questionService.getQuestion(id)\n      .subscribe(data => {\n        console.log(\"Question\", data)\n        this.question = data;\n      })\n  }\n\n  // Method invoked on form submission to create a new reply\n  onSubmit() {\n    if (this._auth.isLoggedIn && this.question) {\n      const newReply = {\n        ...this.replyForm.value,\n        questionId: this.question.questionId \n      };\n\n      this._replyService.createReply(newReply)\n        .subscribe(response => {\n          if (response.success) {\n            console.log(response.message)\n            this._router.navigate([\"/questions\"])\n          }\n          else {\n            console.log(\"Reply creation failed\")\n          }\n        })\n    }\n    else {\n      // If the user is not logged in, display an alert and navigate to the login page\n      alert(\"Log in to submit a reply\");\n      this._router.navigate(['auth/login']);\n    }\n  }\n\n  ngOnInit(): void {\n\n    //Used to retreve the question id from the route parameters\n    const id = Number(this._route.snapshot.paramMap.get('id'));\n\n    // Fetching the question details based on the retrieved ID\n    this.getQuestionById(id);\n  }\n \n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}