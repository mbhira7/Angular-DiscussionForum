{"ast":null,"code":"import { Validators } from \"@angular/forms\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"./authentication.service\";\nimport * as i3 from \"../shared/userform.component\";\nexport class RegisterComponent {\n  constructor(_formbuilder, _authService) {\n    this._formbuilder = _formbuilder;\n    this._authService = _authService;\n    this.registerStatus = \"\";\n    this.registerForm = _formbuilder.group({\n      username: [\"\", Validators.required],\n      password: [\"\", [Validators.required, Validators.pattern(/^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[!@#$%^&*]).{8,}$/)]]\n    });\n  }\n  registerUser() {\n    const newUser = this.registerForm.value;\n    this._authService.register(newUser).subscribe(response => {\n      if (response.success) {\n        this.registerStatus = \"Registered successfully\";\n        console.log(response.message);\n      } else {\n        this.registerStatus = \"Registration failed\";\n        console.log(\"User creation failed\");\n      }\n    });\n  }\n}\nRegisterComponent.ɵfac = function RegisterComponent_Factory(t) {\n  return new (t || RegisterComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.AuthService));\n};\nRegisterComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: RegisterComponent,\n  selectors: [[\"app-register-component\"]],\n  decls: 6,\n  vars: 4,\n  consts: [[3, \"formGroup\", \"ngSubmit\"], [3, \"parentForm\"], [\"type\", \"submit\", 1, \"btn\", \"btn-primary\", 3, \"disabled\"]],\n  template: function RegisterComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"form\", 0);\n      i0.ɵɵlistener(\"ngSubmit\", function RegisterComponent_Template_form_ngSubmit_0_listener() {\n        return ctx.registerUser();\n      });\n      i0.ɵɵelement(1, \"app-userform-component\", 1);\n      i0.ɵɵelementStart(2, \"button\", 2);\n      i0.ɵɵtext(3, \"Register\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(4, \"p\");\n      i0.ɵɵtext(5);\n      i0.ɵɵelementEnd()();\n    }\n    if (rf & 2) {\n      let tmp_2_0;\n      i0.ɵɵproperty(\"formGroup\", ctx.registerForm);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"parentForm\", ctx.registerForm);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"disabled\", ((tmp_2_0 = ctx.registerForm.get(\"username\")) == null ? null : tmp_2_0.invalid) || ((tmp_2_0 = ctx.registerForm.get(\"password\")) == null ? null : tmp_2_0.invalid));\n      i0.ɵɵadvance(3);\n      i0.ɵɵtextInterpolate(ctx.registerStatus);\n    }\n  },\n  dependencies: [i1.ɵNgNoValidate, i1.NgControlStatusGroup, i1.FormGroupDirective, i3.UserformComponent],\n  encapsulation: 2\n});","map":{"version":3,"mappings":"AAGA,SAAiCA,UAAU,QAA0C,gBAAgB;;;;;AAOrG,OAAM,MAAOC,iBAAiB;EAI5BC,YAAoBC,YAAyB,EAAUC,YAAyB;IAA5D,iBAAY,GAAZD,YAAY;IAAuB,iBAAY,GAAZC,YAAY;IAFnE,mBAAc,GAAW,EAAE;IAGzB,IAAI,CAACC,YAAY,GAAGF,YAAY,CAACG,KAAK,CAAC;MACrCC,QAAQ,EAAE,CAAC,EAAE,EAAEP,UAAU,CAACQ,QAAQ,CAAC;MACnCC,QAAQ,EAAE,CAAC,EAAE,EAAE,CAACT,UAAU,CAACQ,QAAQ,EAAER,UAAU,CAACU,OAAO,CAAC,uDAAuD,CAAC,CAAC;KAClH,CAAC;EACJ;EAEAC,YAAY;IACV,MAAMC,OAAO,GAAG,IAAI,CAACP,YAAY,CAACQ,KAAK;IAEvC,IAAI,CAACT,YAAY,CAACU,QAAQ,CAACF,OAAO,CAAC,CAChCG,SAAS,CAACC,QAAQ,IAAG;MACpB,IAAIA,QAAQ,CAACC,OAAO,EAAE;QACpB,IAAI,CAACC,cAAc,GAAG,yBAAyB;QAC/CC,OAAO,CAACC,GAAG,CAACJ,QAAQ,CAACK,OAAO,CAAC;OAC9B,MACI;QACH,IAAI,CAACH,cAAc,GAAG,qBAAqB;QAC3CC,OAAO,CAACC,GAAG,CAAC,sBAAsB,CAAC;;IAEzC,CAAC,CAAC;EACJ;;AAzBWnB,iBAAiB;mBAAjBA,iBAAiB;AAAA;AAAjBA,iBAAiB;QAAjBA,iBAAiB;EAAAqB;EAAAC;EAAAC;EAAAC;EAAAC;IAAA;MCV9BC,+BAA6D;MAA5BA;QAAA,OAAYC,kBAAc;MAAA,EAAC;MAExDD,4CAA6E;MAE7EA,iCAA0I;MAAAA,wBAAQ;MAAAA,iBAAS;MAC3JA,yBAAG;MAAAA,YAAoB;MAAAA,iBAAI;;;;MALzBA,4CAA0B;MAEJA,eAA2B;MAA3BA,6CAA2B;MAE3CA,eAA2F;MAA3FA,6LAA2F;MAChGA,eAAoB;MAApBA,wCAAoB","names":["Validators","RegisterComponent","constructor","_formbuilder","_authService","registerForm","group","username","required","password","pattern","registerUser","newUser","value","register","subscribe","response","success","registerStatus","console","log","message","selectors","decls","vars","consts","template","i0","ctx"],"sourceRoot":"","sources":["/Users/bhira/Desktop/Skole/5.semester/ITPE3200/DiscussionForum-Angular/DiscussionForum-Angular/ClientApp/src/app/authentication/register.component.ts","/Users/bhira/Desktop/Skole/5.semester/ITPE3200/DiscussionForum-Angular/DiscussionForum-Angular/ClientApp/src/app/authentication/register.component.html"],"sourcesContent":["\nimport { Component, OnInit } from \"@angular/core\"\nimport { AuthService } from \"./authentication.service\"\nimport { FormGroup, FormControl, Validators, FormBuilder, ReactiveFormsModule } from \"@angular/forms\"\n\n@Component({\n  selector: \"app-register-component\",\n  templateUrl: \"./register.component.html\",\n})\n\nexport class RegisterComponent  {\n  registerForm: FormGroup;\n  registerStatus: string = \"\"\n\n  constructor(private _formbuilder: FormBuilder, private _authService: AuthService) {\n    this.registerForm = _formbuilder.group({\n      username: [\"\", Validators.required],\n      password: [\"\", [Validators.required, Validators.pattern(/^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[!@#$%^&*]).{8,}$/)]]\n    });\n  }\n\n  registerUser() {\n    const newUser = this.registerForm.value\n\n    this._authService.register(newUser)\n      .subscribe(response => {\n        if (response.success) {\n          this.registerStatus = \"Registered successfully\"\n          console.log(response.message)\n        }\n        else {\n          this.registerStatus = \"Registration failed\"\n          console.log(\"User creation failed\")\n        }\n    })\n  }\n}","<form [formGroup]=\"registerForm\" (ngSubmit)=\"registerUser()\">\n\n    <app-userform-component [parentForm]=\"registerForm\"></app-userform-component>\n\n    <button [disabled]=\"registerForm.get('username')?.invalid || registerForm.get('password')?.invalid\" type=\"submit\" class=\"btn btn-primary\">Register</button>\n    <p>{{ registerStatus }}</p>\n</form>\n\n\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}