{"ast":null,"code":"import { Validators } from \"@angular/forms\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../authentication/authentication.service\";\nimport * as i2 from \"@angular/forms\";\nimport * as i3 from \"@angular/router\";\nimport * as i4 from \"./questions.service\";\nimport * as i5 from \"../shared/questionForm.component\";\nconst _c0 = function () {\n  return [\"/userquestions\"];\n};\nexport class QuestionupdateComponent {\n  constructor(_auth, _formbuilder, _router, _questionService, _route) {\n    this._auth = _auth;\n    this._formbuilder = _formbuilder;\n    this._router = _router;\n    this._questionService = _questionService;\n    this._route = _route;\n    this.questionId = -1;\n    this.questionUpdateForm = _formbuilder.group({\n      title: [\"\", Validators.required],\n      content: [\"\", Validators.required]\n    });\n  }\n  onSubmit() {\n    console.log(this.questionUpdateForm);\n    const newQuestion = this.questionUpdateForm.value;\n    this._questionService.updateQuestion(this.questionId, newQuestion).subscribe(response => {\n      if (response.success) {\n        console.log(response.message);\n        this._router.navigate([\"/userquestions\"]);\n      } else {\n        console.log(\"Question update failed\", response);\n      }\n    });\n  }\n  getQuestionById(questionId) {\n    this._questionService.getQuestion(questionId).subscribe(question => {\n      console.log(\"retrived question: \", question);\n      this.questionUpdateForm.patchValue({\n        title: question.Title,\n        content: question.Content\n      });\n    }, error => {\n      console.log(\"Error loading question for edit: \", error);\n    });\n  }\n  ngOnInit() {\n    //Used to retreve the question id\n    const id = Number(this._route.snapshot.paramMap.get('id'));\n    this.questionId = id;\n    this.getQuestionById(this.questionId);\n  }\n}\nQuestionupdateComponent.ɵfac = function QuestionupdateComponent_Factory(t) {\n  return new (t || QuestionupdateComponent)(i0.ɵɵdirectiveInject(i1.AuthService), i0.ɵɵdirectiveInject(i2.FormBuilder), i0.ɵɵdirectiveInject(i3.Router), i0.ɵɵdirectiveInject(i4.QuestionService), i0.ɵɵdirectiveInject(i3.ActivatedRoute));\n};\nQuestionupdateComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: QuestionupdateComponent,\n  selectors: [[\"app-questionupdate-component\"]],\n  decls: 9,\n  vars: 5,\n  consts: [[1, \"text-center\", \"mb-3\"], [1, \"d-flex\", \"flex-column\", \"gap-4\", 3, \"formGroup\", \"ngSubmit\"], [1, \"d-flex\", \"flex-column\", \"gap-4\", 3, \"parentForm\"], [1, \"d-flex\", \"gap-3\"], [\"type\", \"submit\", 1, \"btn\", \"btn-primary\", 3, \"disabled\"], [1, \"btn\", \"btn-secondary\", 3, \"routerLink\"]],\n  template: function QuestionupdateComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"h1\", 0);\n      i0.ɵɵtext(1, \"Update question\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(2, \"form\", 1);\n      i0.ɵɵlistener(\"ngSubmit\", function QuestionupdateComponent_Template_form_ngSubmit_2_listener() {\n        return ctx.onSubmit();\n      });\n      i0.ɵɵelement(3, \"app-questionForm-component\", 2);\n      i0.ɵɵelementStart(4, \"div\", 3)(5, \"button\", 4);\n      i0.ɵɵtext(6, \"Post\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(7, \"a\", 5);\n      i0.ɵɵtext(8, \"Cancel\");\n      i0.ɵɵelementEnd()()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"formGroup\", ctx.questionUpdateForm);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"parentForm\", ctx.questionUpdateForm);\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"disabled\", ctx.questionUpdateForm.invalid);\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"routerLink\", i0.ɵɵpureFunction0(4, _c0));\n    }\n  },\n  dependencies: [i2.ɵNgNoValidate, i2.NgControlStatusGroup, i2.FormGroupDirective, i3.RouterLink, i5.QuestionFormComponent],\n  encapsulation: 2\n});","map":{"version":3,"mappings":"AACA,SAAiCA,UAAU,QAA0C,gBAAgB;;;;;;;;;;AAarG,OAAM,MAAOC,uBAAuB;EAIlCC,YAAoBC,KAAkB,EAAUC,YAAyB,EAAUC,OAAe,EACxFC,gBAAiC,EAAUC,MAAsB;IADvD,UAAK,GAALJ,KAAK;IAAuB,iBAAY,GAAZC,YAAY;IAAuB,YAAO,GAAPC,OAAO;IAChF,qBAAgB,GAAhBC,gBAAgB;IAA2B,WAAM,GAANC,MAAM;IAH3D,eAAU,GAAW,CAAC,CAAC;IAIrB,IAAI,CAACC,kBAAkB,GAAGJ,YAAY,CAACK,KAAK,CAAC;MAC3CC,KAAK,EAAE,CAAC,EAAE,EAAEV,UAAU,CAACW,QAAQ,CAAC;MAChCC,OAAO,EAAE,CAAC,EAAE,EAAEZ,UAAU,CAACW,QAAQ;KAClC,CAAC;EACJ;EAEAE,QAAQ;IACNC,OAAO,CAACC,GAAG,CAAC,IAAI,CAACP,kBAAkB,CAAC;IACpC,MAAMQ,WAAW,GAAG,IAAI,CAACR,kBAAkB,CAACS,KAAK;IAEjD,IAAI,CAACX,gBAAgB,CAACY,cAAc,CAAC,IAAI,CAACC,UAAU,EAAEH,WAAW,CAAC,CAC/DI,SAAS,CAACC,QAAQ,IAAG;MACpB,IAAIA,QAAQ,CAACC,OAAO,EAAE;QACpBR,OAAO,CAACC,GAAG,CAACM,QAAQ,CAACE,OAAO,CAAC;QAC7B,IAAI,CAAClB,OAAO,CAACmB,QAAQ,CAAC,CAAC,gBAAgB,CAAC,CAAC;OAC1C,MACI;QACHV,OAAO,CAACC,GAAG,CAAC,wBAAwB,EAAEM,QAAQ,CAAC;;IAErD,CAAC,CAAC;EACJ;EAEAI,eAAe,CAACN,UAAkB;IAChC,IAAI,CAACb,gBAAgB,CAACoB,WAAW,CAACP,UAAU,CAAC,CAC1CC,SAAS,CACPO,QAAa,IAAI;MAChBb,OAAO,CAACC,GAAG,CAAC,qBAAqB,EAAEY,QAAQ,CAAC;MAC5C,IAAI,CAACnB,kBAAkB,CAACoB,UAAU,CAAC;QACjClB,KAAK,EAAEiB,QAAQ,CAACE,KAAK;QACrBjB,OAAO,EAAEe,QAAQ,CAACG;OACnB,CAAC;IAEJ,CAAC,EACAC,KAAU,IAAI;MACbjB,OAAO,CAACC,GAAG,CAAC,mCAAmC,EAAEgB,KAAK,CAAC;IACzD,CAAC,CACJ;EACH;EAEAC,QAAQ;IACN;IACA,MAAMC,EAAE,GAAGC,MAAM,CAAC,IAAI,CAAC3B,MAAM,CAAC4B,QAAQ,CAACC,QAAQ,CAACC,GAAG,CAAC,IAAI,CAAC,CAAC;IAC1D,IAAI,CAAClB,UAAU,GAAGc,EAAE;IACpB,IAAI,CAACR,eAAe,CAAC,IAAI,CAACN,UAAU,CAAC;EACvC;;AAlDWlB,uBAAuB;mBAAvBA,uBAAuB;AAAA;AAAvBA,uBAAuB;QAAvBA,uBAAuB;EAAAqC;EAAAC;EAAAC;EAAAC;EAAAC;IAAA;MCdpCC,6BAA6B;MAAAA,+BAAe;MAAAA,iBAAK;MAEjDA,+BAAgG;MAAzDA;QAAA,OAAYC,cAAU;MAAA,EAAC;MAE1DD,gDAA4H;MAE5HA,8BAA0B;MACgEA,oBAAI;MAAAA,iBAAS;MACnGA,4BAA+D;MAAAA,sBAAM;MAAAA,iBAAI;;;MAN3EA,eAAgC;MAAhCA,kDAAgC;MAENA,eAAiC;MAAjCA,mDAAiC;MAGnCA,eAAuC;MAAvCA,yDAAuC;MAChCA,eAAiC;MAAjCA,uDAAiC","names":["Validators","QuestionupdateComponent","constructor","_auth","_formbuilder","_router","_questionService","_route","questionUpdateForm","group","title","required","content","onSubmit","console","log","newQuestion","value","updateQuestion","questionId","subscribe","response","success","message","navigate","getQuestionById","getQuestion","question","patchValue","Title","Content","error","ngOnInit","id","Number","snapshot","paramMap","get","selectors","decls","vars","consts","template","i0","ctx"],"sourceRoot":"","sources":["/Users/bhira/Desktop/Skole/5.semester/ITPE3200/DiscussionForum-Angular/DiscussionForum-Angular/ClientApp/src/app/questions/questionupdate.component.ts","/Users/bhira/Desktop/Skole/5.semester/ITPE3200/DiscussionForum-Angular/DiscussionForum-Angular/ClientApp/src/app/questions/questionupdate.component.html"],"sourcesContent":["import { Component, OnInit } from \"@angular/core\"\nimport { FormGroup, FormControl, Validators, FormBuilder, ReactiveFormsModule } from \"@angular/forms\"\nimport { IQuestion } from \"./question\"\nimport { Router } from \"@angular/router\"\nimport { HttpClient } from \"@angular/common/http\"\nimport { QuestionService } from \"./questions.service\"\nimport { AuthService } from \"../authentication/authentication.service\"\nimport { ActivatedRoute } from \"@angular/router\"\n\n@Component({\n  selector: \"app-questionupdate-component\",\n  templateUrl: \"./questionupdate.component.html\",\n})\n\nexport class QuestionupdateComponent implements OnInit {\n  questionUpdateForm: FormGroup;\n  questionId: number = -1;\n\n  constructor(private _auth: AuthService, private _formbuilder: FormBuilder, private _router: Router,\n    private _questionService: QuestionService, private _route: ActivatedRoute) {\n    this.questionUpdateForm = _formbuilder.group({\n      title: [\"\", Validators.required],\n      content: [\"\", Validators.required],\n    });\n  }\n\n  onSubmit() {\n    console.log(this.questionUpdateForm)\n    const newQuestion = this.questionUpdateForm.value\n\n    this._questionService.updateQuestion(this.questionId, newQuestion)\n      .subscribe(response => {\n        if (response.success) {\n          console.log(response.message)\n          this._router.navigate([\"/userquestions\"])\n        }\n        else {\n          console.log(\"Question update failed\", response)\n        }\n    })\n  }\n\n  getQuestionById(questionId: number) {\n    this._questionService.getQuestion(questionId)\n      .subscribe(\n        (question: any) => {\n          console.log(\"retrived question: \", question);\n          this.questionUpdateForm.patchValue({\n            title: question.Title,\n            content: question.Content\n          });\n\n        },\n        (error: any) => {\n          console.log(\"Error loading question for edit: \", error);\n        }\n    )\n  }\n\n  ngOnInit(): void {\n    //Used to retreve the question id\n    const id = Number(this._route.snapshot.paramMap.get('id'));\n    this.questionId = id\n    this.getQuestionById(this.questionId);\n  }\n\n}\n","<h1 class=\"text-center mb-3\">Update question</h1>\n\n<form [formGroup]=\"questionUpdateForm\" (ngSubmit)=\"onSubmit()\" class=\"d-flex flex-column gap-4\">\n\n    <app-questionForm-component [parentForm]=\"questionUpdateForm\" class=\"d-flex flex-column gap-4\"></app-questionForm-component>\n\n    <div class=\"d-flex gap-3\">\n        <button type=\"submit\" [disabled]=\"questionUpdateForm.invalid\" class=\"btn btn-primary\">Post</button>\n        <a class=\"btn btn-secondary\" [routerLink]=\"['/userquestions']\">Cancel</a>\n    </div>\n</form>\n\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}